python-http(){
  chrome http://localhost:8000
  python3 -m http.server 8000
}

xcat(){
	cat $1 | xclip -selection clipboard
}

p8(){
  gping 8.8.8.8
}

xpwd(){
  pwd | xclip -selection clipboard
}

xfile(){
  readlink -f $1 | xclip -selection clipboard 
}

python-venv(){
  python3 -m venv venv && . venv/bin/activate && pip install -U pip setuptools wheels &> /dev/null
}

pgres(){
  sudo su - postgres
}

gcloud-current-project(){
  gcloud config list --format 'value(core.project)' 2>/dev/null
}

gcloud-current-account(){
  gcloud config list --format 'value(core.account)' 2>/dev/null
}

set-executable(){
  sudo chmod uog+x $1
}

pupi(){
  poetry update && poetry install
}

pipb(){
  poetry install && poetry build 
}


poetry-lint(){
  poetry run mypy .
  poetry run black --line-length 79 -S .
  poetry run isort -w 79 .
  poetry run flakehell lint
  poetry run flake8 --ignore Q000
}

git-fix-author(){
  WRONG_EMAIL="mat.p.wasilewski@gmail.com"
  NEW_NAME="Mateusz Wasilewski"
  NEW_EMAIL="mateusz.wasilewski@biorelate.com"

  if [ "$GIT_COMMITTER_EMAIL" = "$WRONG_EMAIL" ]
  then
      export GIT_COMMITTER_NAME="$NEW_NAME"
      export GIT_COMMITTER_EMAIL="$NEW_EMAIL"
  fi
  if [ "$GIT_AUTHOR_EMAIL" = "$WRONG_EMAIL" ]
  then
      export GIT_AUTHOR_NAME="$NEW_NAME"
      export GIT_AUTHOR_EMAIL="$NEW_EMAIL"
  fi
}

git-push-existing-repo()
{
  git remote add origin $1
  git branch -M main
  git push -u origin main
}

poetry-lint()
{
  poetry run black --line-length 79 -S .
  poetry run flakeheaven lint
  poetry run isort -w 79 --profile=black .
  poetry run mypy .
  # poetry run isort -w 79 .
}

poetry@1.4-lint()
{
  poetry@1.4 run black --line-length 79 -S .
  poetry@1.4 run flakeheaven lint
  poetry@1.4 run isort -w 79 --profile=black .
  poetry@1.4 run mypy .
}

ports()
{
  sudo lsof -i -P -n | grep LISTEN
}

dcu()
{
  if [ "$1" = "--rebuild" ]
  then
    docker compose up --build --force-recreate --no-deps
  elif [ ! -z "$1" ]
  then
    echo "$1 not a correct argument; pass --rebuild or nothing"
  else
    docker compose up 
  fi
}

pvd()
{
  pyenv virtualenv-delete -f $1 
}


bats() {
    BATS_RUN_SKIPPED=true command bats *.bats
}


poetry-flakeheaven-plugins-install() {
  poetry add --group dev flake8-bugbear flake8-builtins flake8-comprehensions darglint flake8-docstrings flake8-eradicate flake8-isort flake8-mutable flake8-pytest-style flake8-spellcheck pep8-naming flake8-quotes flake8-commas
}

gauth() {
  gcloud auth login && gcloud auth application-default login
}

gauth-docker() {
  gcloud auth configure-docker europe-docker.pkg.dev
}

git-pull-recursive() {
  find . -type d -name ".git" -exec sh -c '
      dir=$(dirname "{}")
      echo "Processing directory: $dir"
      branch=$(git -C "$dir" symbolic-ref --short HEAD)
      if [ "$branch" != "main" ]; then
          git -C "$dir" checkout main || { echo "Failed to checkout main in $dir"; exit 1; }
      fi
      git -C "$dir" pull
  ' \;
}

git-fetch-recursive() {
  find . -type d -name ".git" -exec sh -c '
      dir=$(dirname "{}")
      echo "Processing directory: $dir"
      branch=$(git -C "$dir" symbolic-ref --short HEAD)
      if [ "$branch" != "main" ]; then
          git -C "$dir" checkout main || { echo "Failed to checkout main in $dir"; exit 1; }
      fi
      git -C "$dir" fetch 
  ' \;
}

git-switch-recursive() {
    new_branch="$1"

    echo "New branch name $new_branch"
    if [ -z "$new_branch" ]; then
        echo "Error: No branch name provided."
        return 1
    fi
    
    find . -type d -name ".git" -exec sh -c '
        dir=$(dirname "{}")
        echo "Processing directory: $dir"
        branch=$(git -C "$dir" symbolic-ref --short HEAD)

        if git -C "$dir" rev-parse --verify --quiet "$new_branch"; then
            echo "Branch $new_branch already exists in $dir"
        else
            git -C "$dir" checkout -b "$new_branch" || { echo "Failed to switch branch in $dir"; exit 1; }
        fi
        
        git -C "$dir" checkout -b "$new_branch" || { echo "Failed to switch branch in $dir"; exit 1; }
    ' \;
}

git-branch-latest() {
  git for-each-ref --sort=-committerdate --format='%(committerdate:short) %(authorname) %(refname:short) %(subject)' refs/heads/
}

git-commits-not-on-main() {
  # Ensure the script is run inside a Git repository
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
      echo "This script must be run inside a Git repository."
      return 1
  fi

  # Detect the default branch (either 'main' or 'master')
  if git show-ref --quiet refs/heads/main; then
      default_branch="main"
  elif git show-ref --quiet refs/heads/master; then
      default_branch="master"
  else
      echo "Neither 'main' nor 'master' branch found."
      return 1
  fi

  echo "Branch | Commits not on '$default_branch'"
  echo "------------------------------"

  # Get the list of all local branches and handle each line individually
  git for-each-ref --format='%(refname:short)' refs/heads/ | while read -r branch; do
      if [ "$branch" != "$default_branch" ]; then
          # Count commits on the branch that are not in the default branch
          commit_count=$(git rev-list --count "$branch" --not "$default_branch")
          echo "$branch | $commit_count"
      fi
  done
}


docker-rm-1h() {
    docker ps -a --filter 'status=exited' --format '{{.ID}} {{.Status}}' | awk '/Exited.*(1 hour ago|60 minutes ago|59 minutes ago|58 minutes ago|57 minutes ago|56 minutes ago|55 minutes ago|54 minutes ago|53 minutes ago|52 minutes ago|51 minutes ago|50 minutes ago|49 minutes ago|48 minutes ago|47 minutes ago|46 minutes ago|45 minutes ago|44 minutes ago|43 minutes ago|42 minutes ago|41 minutes ago|40 minutes ago|39 minutes ago|38 minutes ago|37 minutes ago|36 minutes ago|35 minutes ago|34 minutes ago|33 minutes ago|32 minutes ago|31 minutes ago|30 minutes ago|29 minutes ago|28 minutes ago|27 minutes ago|26 minutes ago|25 minutes ago|24 minutes ago|23 minutes ago|22 minutes ago|21 minutes ago|20 minutes ago|19 minutes ago|18 minutes ago|17 minutes ago|16 minutes ago|15 minutes ago|14 minutes ago|13 minutes ago|12 minutes ago|11 minutes ago|10 minutes ago|9 minutes ago|8 minutes ago|7 minutes ago|6 minutes ago|5 minutes ago|4 minutes ago|3 minutes ago|2 minutes ago|1 minutes ago|less than a minute ago)/{print $1}' | xargs docker rm
}

docker-rm-24h() {
    docker ps -a --filter 'status=exited' --format '{{.ID}} {{.Status}}' | \
    awk '/Exited.*(hour|minute|less than a minute)/{print $1}' | \
    xargs -r docker rm
}

docker-rmi-24h() {
    docker images --filter "dangling=true" --format '{{.ID}} {{.CreatedSince}}' | \
    awk '/(hours|minutes|less than a minute)/ {print $1}' | \
    xargs -r docker rmi
}

catdir() {
  # Check if a directory path is provided as an argument
  if [ -z "$1" ]; then
    echo "Usage: print_directory_contents <directory_path>"
    return 1
  fi

  # Function to print the contents of files with separators
  local directory="$1"
  
  _print_files() {
    for file in "$1"/*; do
      if [ -d "$file" ]; then
        # Recursively call the function if it's a directory
        _print_files "$file"
      elif [ -f "$file" ]; then
        # Print file path and content
        echo "========== FILE: $file =========="
        cat "$file"
        echo "=================================="
        echo
      fi
    done
  }

  # Start the process
  _print_files "$directory"
}

clip-branch() {
  local FILE_PATH="$1"
  local BRANCH="${2:-main}"

  if [[ -z "$FILE_PATH" ]]; then
    echo "Error: File path is required." >&2
    return 1
  fi

  # Resolve the file path relative to the Git repository root
  local REPO_ROOT
  REPO_ROOT=$(git rev-parse --show-toplevel)
  if [[ $? -ne 0 ]]; then
    echo "Error: Not a git repository." >&2
    return 1
  fi

  local ABS_FILE_PATH
  local ABS_REPO_ROOT
  ABS_FILE_PATH=$(readlink -f "$FILE_PATH")
  ABS_REPO_ROOT=$(readlink -f "$REPO_ROOT")

  local FULL_PATH
  FULL_PATH="${ABS_FILE_PATH#$ABS_REPO_ROOT/}"  # Strip the repo root from the absolute path

  if [[ -z "$FULL_PATH" ]]; then
    echo "Error: Unable to resolve file path '$FILE_PATH' relative to the repository root." >&2
    return 1
  fi

  if git show "$BRANCH:$FULL_PATH" > /dev/null 2>&1; then
    git show "$BRANCH:$FULL_PATH" | pbcopy
    echo "Contents of '$FULL_PATH' copied to clipboard from branch '$BRANCH'."
  else
    # Check if the file was moved
    local MOVED_FILE
    MOVED_FILE=$(git log --name-status -- "$FULL_PATH" | grep '^R' | awk '{print $3}' | head -n 1)

    if [[ -n "$MOVED_FILE" ]]; then
      echo "File '$FILE_PATH' was moved to '$MOVED_FILE' but is not present on branch '$BRANCH'."
    else
      echo "Error: File '$FILE_PATH' does not exist on branch '$BRANCH' and no move was detected." >&2
    fi
    return 1
  fi
}

cursor-diff() {
  local FILE_PATH="$1"
  local BRANCH="${2:-main}"

  if [[ -z "$FILE_PATH" ]]; then
    echo "Error: File path is required." >&2
    return 1
  fi

  git difftool -y "$BRANCH" -- "$FILE_PATH"
}

