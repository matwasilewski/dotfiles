"""
A utility script for extracting pytest fixtures from Python files.

This script scans Python files in a given directory (or a single file) and extracts
all pytest fixtures, consolidating them into a single output file. Each fixture is
preserved with its original decorator and implementation, and the source file is
documented in comments.

Usage:
    python fixture_extract.py <input_path> [--output fixtures.py]

Args:
    input_path: Path to a Python file or directory to scan
    --output: Optional path for the output file (defaults to 'fixtures.py')
"""

import os
import re

def find_python_files(path):
    """Recursively find all Python files in the given path."""
    python_files = []
    if os.path.isfile(path):
        if path.endswith('.py'):
            python_files.append(path)
    else:
        for root, _, files in os.walk(path):
            for file in files:
                if file.endswith('.py'):
                    python_files.append(os.path.join(root, file))
    print(f"Found {len(python_files)} Python files: {python_files}")
    return python_files

def extract_fixtures(file_path):
    """Extract pytest fixtures from a Python file."""
    fixtures = []
    fixture_pattern = re.compile(r'@pytest\.fixture(\s*\([^)]*\))?\s*$')  # Improved pattern
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
        in_fixture = False
        fixture_block = []
        for line in lines:
            if fixture_pattern.search(line.strip()):  # Using search instead of match
                if fixture_block:
                    fixtures.append("\n".join(fixture_block))
                    fixture_block = []
                in_fixture = True
            if in_fixture:
                fixture_block.append(line.rstrip())
                # Check for function definition end (decrease in indentation)
                if line.strip() and not line.startswith(' ') and not line.startswith('@'):
                    in_fixture = False
                    fixtures.append("\n".join(fixture_block))
                    fixture_block = []
        if fixture_block and in_fixture:  # Only append if we're still in a fixture
            fixtures.append("\n".join(fixture_block))
    return fixtures

def write_fixtures_to_file(fixtures_by_file, output_file='fixtures.py'):
    """Write fixtures to a separate file with comments about their origin."""
    os.makedirs(os.path.dirname(output_file) or '.', exist_ok=True)  # Create output directory if needed
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('"""Generated pytest fixtures file. DO NOT EDIT MANUALLY.\n')
        f.write('This file is auto-generated by fixture_extract.py\n"""\n\n')
        f.write('import pytest\n\n')  # Add pytest import
        for file_path, fixtures in fixtures_by_file.items():
            if fixtures:
                f.write(f"# Fixtures extracted from: {file_path}\n\n")
                f.write("\n\n".join(fixtures))
                f.write("\n\n")

def main(input_path, output_file='fixtures.py'):
    python_files = find_python_files(input_path)
    fixtures_by_file = {}
    for python_file in python_files:
        print(f"Extracting fixtures from {python_file}")
        fixtures = extract_fixtures(python_file)
        print(f"Found {len(fixtures)} fixtures in {python_file}")
        if fixtures:
            fixtures_by_file[python_file] = fixtures
    write_fixtures_to_file(fixtures_by_file, output_file)
    print(f"Fixtures have been extracted and saved to '{output_file}'.")

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description="Extract pytest fixtures from Python files.")
    parser.add_argument('input_path', type=str, help="Path to a Python file or directory.")
    parser.add_argument('--output', type=str, default='fixtures.py', help="Output file to save fixtures.")
    args = parser.parse_args()

    main(args.input_path, args.output)
